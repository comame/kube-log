#! /usr/bin/env node

// TODO: MySQL への追加でコケがちなので、キューイングする

const { spawn, ChildProcess } = require("child_process");
const { readdir, watch } = require("fs/promises");
const { env } = require("node:process");
const mysql = require("mysql2");

const con = mysql.createPool({
  host: env["MYSQL_HOST"],
  user: env["MYSQL_USER"],
  password: env["MYSQL_PASSWORD"],
  database: env["MYSQL_DATABASE"],
  connectionLimit: 10,
});

const ignoreListEnv = env["IGNORE_NS"] ?? "";
const ignoreList = ignoreListEnv.split(",");

/** @type {Map<string, ChildProcess>} */
const tails = new Map();

/**
 * @type {[string, string, string, string][]}
 * log, ns, pod, datetime
 * */
const logQueue = [];

/** @param filename {string} */
function start(filename) {
  const tail = spawn("/bin/tail", ["-f", `/var/log/containers/${filename}`]);
  const [pod, ns] = filename.split("_");
  if (ignoreList.includes(ns)) {
    console.log(`Skipped ${ns} ${pod}`);
    return;
  }

  tail.stdout.on("data", (data) => {
    const lines = data
      .toString()
      .split("\n")
      .filter((l) => l.trim() !== "");

    const now = toDatetimeString(new Date());

    for (const line of lines) {
      enqueue(line, ns, pod, now);
    }
  });
  tail.on("exit", () => {
    tails.delete(filename);
  });
  tails.set(filename, tail);
}

setInterval(() => {
  const logs = dequeue(Math.trunc(logQueue.length / 2) + 1);
  if (logs.length === 0) {
    return;
  }

  const queryPlaceholder = Array.from({ length: logs.length })
    .map(() => "(?, ?, ?, ?)")
    .join(", ");

  const args = logs.flatMap(([log, ns, pod, datetime]) => [
    log,
    ns,
    pod,
    datetime,
  ]);

  const now = toDatetimeString(new Date());
  console.time(now);

  con.query(
    "insert into log (log_value, ns, pod, created_datetime) values " +
      queryPlaceholder,
    args,
    (err, result, fields) => {
      console.log(logs.length);
      console.timeEnd(now);
      if (err) {
        warikomi(logs);
        console.error(err);
      }
    }
  );
}, 1000 * 1);

console.log("start");

readdir("/var/log/containers").then((items) => {
  items.forEach((item) => {
    start(item);
  });
});
(async () => {
  const watcher = watch("/var/log/containers", {
    recursive: true,
  });

  for await (const event of watcher) {
    const filename = event.filename;
    if (Array.from(tails.keys()).includes(filename)) {
      tails.get(filename).kill();
      tails.delete(filename);
    } else {
      start(filename);
    }
  }
})();

/**
 * @param {string} log
 * @param {string} ns
 * @param {string} pod
 * @param {string} datetime
 */
function enqueue(log, ns, pod, datetime) {
  logQueue.push([log, ns, pod, datetime]);
}
/**
 * @param {string} log
 * @param {string} ns
 * @param {string} pod
 * @param {string} datetime
 */
function warikomi(log, ns, pod, datetime) {
  logQueue.unshift([log, ns, pod, datetime]);
}

/**
 * @param {number} size
 * @returns {[string, string, string, string]}
 */
function dequeue(size) {
  return logQueue.splice(0, size);
}

/**
 * @param {Date} date
 */
function toDatetimeString(date) {
  const paddingZero = (str) => {
    if (str.length == 2) {
      return str;
    } else {
      return "0" + str;
    }
  };

  const y = date.getFullYear().toString(10);
  const mo = paddingZero((date.getMonth() + 1).toString(10));
  const d = paddingZero(date.getDate().toString(10));
  const h = paddingZero(date.getHours().toString(10));
  const mi = paddingZero(date.getMinutes().toString(10));
  const s = paddingZero(date.getSeconds().toString(10));

  return `${y}-${mo}-${d} ${h}:${mi}:${s}`;
}
