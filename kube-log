#! /usr/bin/env node

const { spawn, ChildProcess } = require("child_process");
const { readdir, watch } = require("fs/promises");
const { env } = require("node:process");
const mysql = require("mysql2");
const { exit } = require("process");

// const con = mysql.createConnection({
//   host: env["MYSQL_HOST"],
//   user: env["MYSQL_USER"],
//   password: env["MYSQL_PASSWORD"],
//   database: env["MYSQL_DATABASE"],
// });

const con = mysql.createPool({
  host: env["MYSQL_HOST"],
  user: env["MYSQL_USER"],
  password: env["MYSQL_PASSWORD"],
  database: env["MYSQL_DATABASE"],
  connectionLimit: 30,
});

/** @type {Map<string, ChildProcess>} */
const tails = new Map();

/** @param filename {string} */
function start(filename) {
  const tail = spawn("/bin/tail", ["-f", `/var/log/containers/${filename}`]);
  const [pod, ns] = filename.split("_");

  tail.stdout.on("data", (data) => {
    const lines = data
      .toString()
      .split("\n")
      .filter((l) => l.trim() !== "");

    const queryPlaceholder = Array.from({ length: lines.length })
      .map(() => "(?, ?, ?, ?)")
      .join(", ");

    const args = lines.flatMap((line) => [
      line,
      ns,
      pod,
      toDatetimeString(new Date()),
    ]);

    con.query(
      "insert into log (log_value, ns, pod, created_datetime) values " +
        queryPlaceholder,
      args,
      (err, result, fields) => {
        if (err) {
          console.error(err);
          exit(1);
        }
      }
    );
  });
  tail.on("exit", () => {
    tails.delete(filename);
    console.log(`logger-main:Exit ${filename}`);
  });
  console.log(`logger-main:Start ${filename}`);
  tails.set(filename, tail);
}

readdir("/var/log/containers").then((items) => {
  items.forEach((item) => {
    start(item);
  });
});
(async () => {
  const watcher = watch("/var/log/containers", {
    recursive: true,
  });

  for await (const event of watcher) {
    const filename = event.filename;
    if (Array.from(tails.keys()).includes(filename)) {
      tails.get(filename).kill();
      tails.delete(filename);
    } else {
      start(filename);
    }
  }
})();

/**
 * @param {Date} date
 */
function toDatetimeString(date) {
  const paddingZero = (str) => {
    if (str.length == 2) {
      return str;
    } else {
      return "0" + str;
    }
  };

  const y = paddingZero(date.getFullYear().toString(10));
  const mo = paddingZero((date.getMonth() + 1).toString(10));
  const d = paddingZero(date.getDate().toString(10));
  const h = paddingZero(date.getHours().toString(10));
  const mi = paddingZero(date.getMinutes().toString(10));
  const s = paddingZero(date.getSeconds().toString(10));

  return `${y}-${mo}-${d} ${h}:${mi}:${s}`;
}
